# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pkg.clover import clover_pb2 as clover__pb2


class CloverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetConnectionStats = channel.unary_unary(
                '/Clover/GetConnectionStats',
                request_serializer=clover__pb2.ConnectionStatsRequest.SerializeToString,
                response_deserializer=clover__pb2.ConnectionStatsResponse.FromString,
                )
        self.GetAggregateTimeSeries = channel.unary_unary(
                '/Clover/GetAggregateTimeSeries',
                request_serializer=clover__pb2.AggregateTimeSeriesRequest.SerializeToString,
                response_deserializer=clover__pb2.AggregateTimeSeriesResponse.FromString,
                )
        self.GetBreakdown = channel.unary_unary(
                '/Clover/GetBreakdown',
                request_serializer=clover__pb2.BreakdownRequest.SerializeToString,
                response_deserializer=clover__pb2.BreakdownResponse.FromString,
                )
        self.StreamTop = channel.unary_stream(
                '/Clover/StreamTop',
                request_serializer=clover__pb2.BreakdownRequest.SerializeToString,
                response_deserializer=clover__pb2.TopResponse.FromString,
                )
        self.GetSamplingRate = channel.unary_unary(
                '/Clover/GetSamplingRate',
                request_serializer=clover__pb2.SamplingRateRequest.SerializeToString,
                response_deserializer=clover__pb2.SamplingRateResponse.FromString,
                )
        self.GetCount = channel.unary_unary(
                '/Clover/GetCount',
                request_serializer=clover__pb2.CountRequest.SerializeToString,
                response_deserializer=clover__pb2.CountResponse.FromString,
                )
        self.GetHostnames = channel.unary_unary(
                '/Clover/GetHostnames',
                request_serializer=clover__pb2.HostnamesRequest.SerializeToString,
                response_deserializer=clover__pb2.HostnamesResponse.FromString,
                )
        self.GetSrcDstAppStats = channel.unary_unary(
                '/Clover/GetSrcDstAppStats',
                request_serializer=clover__pb2.AppStatsRequest.SerializeToString,
                response_deserializer=clover__pb2.AppStatsResponse.FromString,
                )
        self.GetDapperStats = channel.unary_unary(
                '/Clover/GetDapperStats',
                request_serializer=clover__pb2.DapperStatsRequest.SerializeToString,
                response_deserializer=clover__pb2.DapperStatsResponse.FromString,
                )
        self.GetTCPStats = channel.unary_unary(
                '/Clover/GetTCPStats',
                request_serializer=clover__pb2.TCPStatsRequest.SerializeToString,
                response_deserializer=clover__pb2.TCPStatsResponse.FromString,
                )


class CloverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetConnectionStats(self, request, context):
        """Get stats for each unique connection in a given time window.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAggregateTimeSeries(self, request, context):
        """Get a time series summarizing connections in a given time window.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBreakdown(self, request, context):
        """Get metrics broken down by fields.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTop(self, request, context):
        """StreamTop streams out the top N groups.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSamplingRate(self, request, context):
        """Get a summary of sampling rate in a given time window.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCount(self, request, context):
        """Get the number of unique groups. If no grouping is specified, get the number of flow records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHostnames(self, request, context):
        """Text search hostnames. Return corresponding IP addresses for any matches.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSrcDstAppStats(self, request, context):
        """Get Flow stats between Source and Destination Applications.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDapperStats(self, request, context):
        """Get Dapper Stats.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTCPStats(self, request, context):
        """Get TCP Stats.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CloverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetConnectionStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConnectionStats,
                    request_deserializer=clover__pb2.ConnectionStatsRequest.FromString,
                    response_serializer=clover__pb2.ConnectionStatsResponse.SerializeToString,
            ),
            'GetAggregateTimeSeries': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAggregateTimeSeries,
                    request_deserializer=clover__pb2.AggregateTimeSeriesRequest.FromString,
                    response_serializer=clover__pb2.AggregateTimeSeriesResponse.SerializeToString,
            ),
            'GetBreakdown': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBreakdown,
                    request_deserializer=clover__pb2.BreakdownRequest.FromString,
                    response_serializer=clover__pb2.BreakdownResponse.SerializeToString,
            ),
            'StreamTop': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamTop,
                    request_deserializer=clover__pb2.BreakdownRequest.FromString,
                    response_serializer=clover__pb2.TopResponse.SerializeToString,
            ),
            'GetSamplingRate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSamplingRate,
                    request_deserializer=clover__pb2.SamplingRateRequest.FromString,
                    response_serializer=clover__pb2.SamplingRateResponse.SerializeToString,
            ),
            'GetCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCount,
                    request_deserializer=clover__pb2.CountRequest.FromString,
                    response_serializer=clover__pb2.CountResponse.SerializeToString,
            ),
            'GetHostnames': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHostnames,
                    request_deserializer=clover__pb2.HostnamesRequest.FromString,
                    response_serializer=clover__pb2.HostnamesResponse.SerializeToString,
            ),
            'GetSrcDstAppStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSrcDstAppStats,
                    request_deserializer=clover__pb2.AppStatsRequest.FromString,
                    response_serializer=clover__pb2.AppStatsResponse.SerializeToString,
            ),
            'GetDapperStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDapperStats,
                    request_deserializer=clover__pb2.DapperStatsRequest.FromString,
                    response_serializer=clover__pb2.DapperStatsResponse.SerializeToString,
            ),
            'GetTCPStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTCPStats,
                    request_deserializer=clover__pb2.TCPStatsRequest.FromString,
                    response_serializer=clover__pb2.TCPStatsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Clover', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Clover(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetConnectionStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Clover/GetConnectionStats',
            clover__pb2.ConnectionStatsRequest.SerializeToString,
            clover__pb2.ConnectionStatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAggregateTimeSeries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Clover/GetAggregateTimeSeries',
            clover__pb2.AggregateTimeSeriesRequest.SerializeToString,
            clover__pb2.AggregateTimeSeriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBreakdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Clover/GetBreakdown',
            clover__pb2.BreakdownRequest.SerializeToString,
            clover__pb2.BreakdownResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamTop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Clover/StreamTop',
            clover__pb2.BreakdownRequest.SerializeToString,
            clover__pb2.TopResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSamplingRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Clover/GetSamplingRate',
            clover__pb2.SamplingRateRequest.SerializeToString,
            clover__pb2.SamplingRateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Clover/GetCount',
            clover__pb2.CountRequest.SerializeToString,
            clover__pb2.CountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHostnames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Clover/GetHostnames',
            clover__pb2.HostnamesRequest.SerializeToString,
            clover__pb2.HostnamesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSrcDstAppStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Clover/GetSrcDstAppStats',
            clover__pb2.AppStatsRequest.SerializeToString,
            clover__pb2.AppStatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDapperStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Clover/GetDapperStats',
            clover__pb2.DapperStatsRequest.SerializeToString,
            clover__pb2.DapperStatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTCPStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Clover/GetTCPStats',
            clover__pb2.TCPStatsRequest.SerializeToString,
            clover__pb2.TCPStatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
